[
  {
    "path": "posts/2022-11-17-class-4-intro-to-ggplot2/",
    "title": "Class 4: Introduction to ggplot2 (part1)",
    "description": {},
    "author": [
      {
        "name": "Michael Kaufman",
        "url": "https://github.com/mlkaufman"
      }
    ],
    "date": "2022-11-22",
    "categories": [],
    "contents": "\nThe Rmarkdown for this document is \nhttps://github.com/rnabioco/bmsc-7810-pbda/blob/main/_posts/2022-11-17-class-4-intro-to-ggplot2/class-4-intro-to-ggplot2.Rmd\nGoals for today\nIntroduction to plotting with the ggplot2 package\nThe grammar of graphics concept\nBasic plotting\nAdding additional information\nOther geometries\nMultiple geometries\nSaving plots\nAdditional Helpful Resources\nggplot2 package homepage :: https://ggplot2.tidyverse.org/\nR for Data Science :: https://r4ds.had.co.nz/\nggplot2 Book :: https://ggplot2-book.org/\nGallery of Plots and Examples :: https://r-graph-gallery.com/\nData Visualization with ggplot2 :: Cheat sheet :: https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf\nThe ggplot2 Package\n\n\n\nThis package allows you to declaratively create graphics by giving a set of variables to map to aesthetics and then layer graphical directives to produce a plot.\nIt’s part of the tidyverse of R packages for data science and analysis, sharing in their design philosophy.\nAlternative to the built in R graphics and plotting functions.Written by Hadley Wickham\nGrammar of Graphics\n\n\n\nGrammar gives languages rules.\nGrammar has a technical meaning.\nGrammar makes language expressive.\n-Leland Wilkinson 1945-2021\nLayers of logical command flow and readability.\nLayers of ggplot2\n\n\n\nBasic Grammar\nPlot = data + aesthetics + geometry\ndata = the dataset, typically a dataframeaesthetics = map variables x and y to axisgeometry = type of graphic or plot to be rendered\nfacets = multiple plotsstatistics = add calculationstheme = make the plot pretty or follow a particular style\n\n\n# ggplot(<DATA>, aes(<MAPPINGS>)) + <GEOM_function>()\n\n?ggplot # bring up the ggplot function help\n\n\nData to Plot\nTo begin plotting we need to start with some data to visualize. Here we can use a built-in dataset regarding Motor Trend Car Road Tests called mtcars. This dataset is a dataframe which is a key format for using with ggplot. We can preview the data structure using the head() function.\n\n\n#some built in data.\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nThe data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\nA data frame with 32 observations on 11 (numeric) variables.\n[, 1] mpg Miles/(US) gallon\n[, 2] cyl Number of cylinders\n[, 3] disp Displacement (cu.in.)\n[, 4] hp Gross horsepower\n[, 5] drat Rear axle ratio\n[, 6] wt Weight (1000 lbs)\n[, 7] qsec 1/4 mile time\n[, 8] vs Engine (0 = V-shaped, 1 = straight)\n[, 9] am Transmission (0 = automatic, 1 = manual)\n[,10] gear Number of forward gears\n[,11] carb Number of carburetors-R Documentation\nBasic Plot\nUsing the basic ggplot grammar of graphics template we can produce a scatterplot from the dataframe.\n\n\n# ggplot(<DATA>, aes(<MAPPINGS>)) + <GEOM_function>()\n\nggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()\n\n\n\nWe can change the data being plotted by picking a different column from the dataframe. For instance here we are plotting the horsepower(hp) versus miles per gallon(mpg). Also note that we can make the code more readable by placing proceeding layers on a different line after the plus sign.\n\n\nggplot(mtcars, aes(x=hp, y=mpg)) + \n  geom_point()\n\n\n\nAdding Additional Information to the Plot\nTitle\nWe can add a title to the plot simply by adding another layer and the ggtitle() function.\n\n\nggplot(mtcars, aes(x=hp, y=mpg)) + \n  geom_point() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\")\n\n\n\nX and Y axis Labels\nWe can over write the default and add our own labels to the x and y axis by using the xlab() and ylab() functions respectively.\n\n\nggplot(mtcars, aes(x=hp, y=mpg)) + \n  geom_point() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\") +\n  ylab(\"miles per gallon\") + \n  xlab(\"horsepower\")\n\n\n\nGetting Geometry Specific Help\nWe can easily add a third bit of information to the plot by using the color aesthetic. Each geometry has its own list of aesthetics that you can add and modify. Consult the help page for each one.\n\n\n?geom_point() # bring up the help page for geom_point()\n\n\nAdding the Color Aesthetic\n\n\nggplot(mtcars, aes(x=hp, y=mpg, color=cyl)) + \n  geom_point() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\") +\n  ylab(\"miles per gallon\") + \n  xlab(\"horsepower\")\n\n\n\nAnd we can relabel the legend title for the new color aesthetic to make it more readable.\n\n\nggplot(mtcars, aes(x=hp, y=mpg, color=cyl)) + \n  geom_point() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\") +\n  ylab(\"miles per gallon\") + \n  xlab(\"horsepower\") +\n  labs(color=\"#cylinders\")\n\n\n\nA Fourth Aesthetic\nYou can even continue to add even more information to the plot through additional aesthetics. Though this might be a bit much.\n\n\nggplot(mtcars, aes(x=hp, y=mpg, color=cyl, size = wt)) + \n  geom_point() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\") +\n  ylab(\"miles per gallon\") + \n  xlab(\"horsepower\") +\n  labs(color=\"#cylinders\", size=\"weight\")\n\n\n\nInstead we can use a specific value instead of the wt variable to adjust the size of the dots.\n\n\nggplot(mtcars, aes(x=hp, y=mpg, color=cyl, size = 3)) + \n  geom_point() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\") +\n  ylab(\"miles per gallon\") + \n  xlab(\"horsepower\") +\n  labs(color=\"#cylinders\", size=\"weight\")\n\n\n\nOther Geometries\nThere are many other geometries that you can use in your plots. Here is a short list:\ngeom_point(): scatterplot\ngeom_line(): lines connecting points by increasing value of x\ngeom_path(): lines connecting points in sequence of appearance\ngeom_boxplot(): box and whiskers plot for categorical variables\ngeom_bar(): bar charts for categorical x axis\ngeom_histogram(): histogram for continuous x axis\ngeom_violin(): distribution kernel of data dispersion\ngeom_smooth(): function line based on data\ngeom_line()\nBut utilizing the right plot to efficiently show your data is key. Here we swapped the geom_point for geom_line to see what would happen.\n\n\nggplot(mtcars, aes(x=hp, y=mpg, color=cyl)) + \n  geom_line() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\") +\n  ylab(\"miles per gallon\") + \n  xlab(\"horsepower\") +\n  labs(color=\"#cylinders\")\n\n\n\nPloting the Categories with geom_col()\n\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nLooking back at the data structure of mtcars, we see that the names of the cars are stored as the row names of the data frame. We can access this using the rownames()function and use it in subsequent plots.\n\n\nrownames(mtcars)\n\n [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"         \n [4] \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"            \n [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"           \n[10] \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"         \n[13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\" \n[16] \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"           \n[19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"      \n[22] \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"         \n[25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"      \n[28] \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"       \n[31] \"Maserati Bora\"       \"Volvo 142E\"         \n\n\n\nggplot(mtcars, aes(x=rownames(mtcars), y=mpg)) + \n  geom_col() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\")\n\n\n\nYou will learn other ways to make this more legable later. For a quick fix we can swap the x and y mappings.\n\n\nggplot(mtcars, aes(y=rownames(mtcars), x=mpg)) + \n  geom_col() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\")\n\n\n\nWe can reorder the data to make it easier to visualize important information.\n\n\nggplot(mtcars, aes(y=reorder(rownames(mtcars), mpg), x=mpg)) + \n  geom_col() +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\")\n\n\n\nTake some time to play around with this template. Try substituting different columns from the dataframe. What works or doesn’t work and why?\nMultiple Geometries\nYou can also add another layer of geometry to the same ggplot. Notice that since we need two separate aesthetic declarations that they have moved from the ggplot function to their respective geom_ functions.\n\n\nggplot(mtcars) +\n  geom_point(aes(x=hp, y=mpg)) +\n  geom_line(aes(x=hp, y=mpg, color=cyl)) +\n  ggtitle(\"Modern Cars: Horsepower vs Miles Per Gallon\") +\n  ylab(\"miles per gallon\") + \n  xlab(\"horsepower\") +\n  labs(color=\"#cylinders\")\n\n\n\nThis particular geometry addition isn’t very useful. Try adding geom_smooth() instead of geom_line().\nSaving Plots\nSaving these plots is easy! Simply call the ggsave() function to save the last plot that you created.\n\n\nggsave(\"plot.png\") # saves the last plot to a PNG file in the current working directory\n\n\nYou can also specify the dots per inch and the width of height of the image to ensure publication quality figures upon saving.\n\n\nggsave(\"plot-highres.png\", dpi = 300, width = 8, height = 4) # you can specify the dots per inch (dpi) and the width and height parameters\n\n\nMore Examples\nLets take a look at gallery resource to preview different plot types and get ideas for our own plots.https://r-graph-gallery.com/\nSessionInfo\n\n\nsessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Monterey 12.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] ggplot2_3.4.0\n\nloaded via a namespace (and not attached):\n [1] highr_0.9        bslib_0.4.1      compiler_4.2.2  \n [4] pillar_1.8.1     jquerylib_0.1.4  tools_4.2.2     \n [7] digest_0.6.30    downlit_0.4.2    jsonlite_1.8.3  \n[10] evaluate_0.17    memoise_2.0.1    lifecycle_1.0.3 \n[13] tibble_3.1.8     gtable_0.3.1     png_0.1-7       \n[16] pkgconfig_2.0.3  rlang_1.0.6      DBI_1.1.3       \n[19] cli_3.4.1        rstudioapi_0.14  distill_1.5     \n[22] yaml_2.3.6       xfun_0.34        fastmap_1.1.0   \n[25] withr_2.5.0      stringr_1.4.1    dplyr_1.0.10    \n[28] knitr_1.40       generics_0.1.3   sass_0.4.2      \n[31] vctrs_0.5.0      tidyselect_1.2.0 grid_4.2.2      \n[34] glue_1.6.2       R6_2.5.1         fansi_1.0.3     \n[37] rmarkdown_2.17   farver_2.1.1     magrittr_2.0.3  \n[40] scales_1.2.1     htmltools_0.5.3  assertthat_0.2.1\n[43] colorspace_2.0-3 labeling_0.4.2   utf8_1.2.2      \n[46] stringi_1.7.8    munsell_0.5.0    cachem_1.0.6    \n\n\n\n\n",
    "preview": "posts/2022-11-17-class-4-intro-to-ggplot2/img/ggplot2.png",
    "last_modified": "2022-11-22T15:30:31-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-10-03-install-r/",
    "title": "Prerequisite: R installation and Rmarkdown/Rstudio overview",
    "description": {},
    "author": [
      {
        "name": "Kent Riemondy",
        "url": "https://github.com/kriemo"
      }
    ],
    "date": "2022-11-22",
    "categories": [],
    "contents": "\n\nContents\nDownload R\nMacOS\nWindows\nLinux\n\nDownload Rstudio\nDownload compiler tools\nMacOS\nWindows\nLinux\n\nInstalling the tidyverse and Rmarkdown packages\nIntroduction to using Rstudio and Rmarkdown\n(Appendix) Installing packages from other sources\n\nThis article will explain how to install R, Rstudio, and R packages.\nPlease watch the video at the end of the article that gives an overview of using Rstudio and the Rmarkdown format.\nDownload R\nDownload R from CRAN. Go to the CRAN homepage https://cran.r-project.org/. Select the link to download R for your operating system.\nMacOS\nInstall the newest R version (4.2.1). We recommend installing the version for Intel Macs. If you have a Mac with an M1 processor (click the Apple -> About this Mac, see information under chip), we still recommend using the Intel version of R as it is much easier to install packages built for the intel version at this time. Download the .pkg file, open and follow the prompts to install.\nWindows\nSelect the base link, then click Download R-4.2.1 for Windows to download the .exe file. Open this file to install R.\nLinux\nIf you are on linux, then follow the documentation for your linux OS.\nDownload Rstudio\nGo to the Rstudio website and download Rstudio Desktop for your OS.\nOnce downloaded and installed, open up Rstudio to complete the rest of the tutorial.\nDownload compiler tools\nMacOS\nTo install the necessary compilers, we will follow the recommend steps outlined by CRAN: https://mac.r-project.org/tools/\nYou will need to install the xcode command line tools if a package requires compilation. Open Rstudio and click on the “Terminal” pane. Alternatively you can open the Terminal app from /Applications/Utilities/ (or use the search tool to search for terminal)\nType the following into terminal:\nsudo xcode-select --install\nType in your macOS password, press enter and then click “Install”. This download will require ~9Gb. Verify the installation by typing into terminal:\ngcc --version\nWhich should print something similar to this:\n#' gcc (GCC) 4.8.5\n#' Copyright (C) 2015 Free Software Foundation, Inc.\n#' This is free software; see the source for copying conditions.  There is NO\n#' warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nHere’s a youtube video explainer\nNext you need to install gfortran, which can be obtained from the CRAN instruction site above. We recommend using the intel version of R, so please follow the instructions for Intel Macs and install gfortran using the gfortran-8.2-Mojave.dmg installer.\nOnce you’ve run the gfortran installer the last step is to make sure that this program is in your PATH. This step will make the gfortran program visible to R, and other programs.\nFirst determine which type of shell you have (typically bash or zsh). Execute the following in a terminal (click either on the terminal pane in Rstudio, or open the terminal app in macOS).\necho $SHELL\nIf you see /bin/zsh then make a plain text file called .zshrc in your home directory (e.g. /Users/Your-macOS-username/), if it doesn’t already exist. If instead you see /bin/bash then make a file called .bashrc in your home directory, if it doesn’t already exist. You can use Rstudio to make a new plain-text file (File->New file->Text) or by opening up the Textedit app, then click Format->Make Plain Text.\nAdd the following line of text to the file (and keep any other text if already present).\nexport PATH=$PATH:/usr/local/gfortran/bin\nSave the text file to your home directory. You may need to rename the file after saving to ensure that it doesn’t end with .txt. (e.g. rename .zshrc.txt -> .zshrc). This file will be a hidden file. Hidden files can be seen in the Finder app by pressing Command + Shift + . (period) to toggle on/off visulizaing hidden files.\nClose and reopen Rstudio.\nWindows\nYou need to install Rtools from CRAN. Go to this link and download the exe installer for your OS: https://cran.r-project.org/bin/windows/Rtools/\nLinux\nYou should have a compiler available already.\nInstalling the tidyverse and Rmarkdown packages\nOnce you have R and Rstudio set up, open up Rstudio, then we will install packages. Packages are extensions to the base R installation that provide additionally functionality to the language. In this course we will use packages from the tidyverse, which is a collection of packages commonly used for data science and interactive data analysis. Installing the tidyverse package will install the entire collection of tidyverse packages.\nCRAN is the official R package repository. CRAN has 18,000+ packages, including the tidyverse packages. Packages from CRAN are installed using the install.packages() function. A successful install will only need to be done once for the course.\nOpen Rstudio to launch R. Then in the console pane, execute the following command to install the tidyverse:\ninstall.packages(\"tidyverse\")\n\n\n\nThis command will take a few minutes to run while all of the packages are installed. Package installation will be completed once the > prompt reappears. Once complete, test package installation by loading the package(s)\nlibrary(tidyverse)\nIf successful you will see something like this:\n\n\n\nAn error will look like this (note misspelled package name for demonstration purposes):\n\n\n\nIf loading tidyverse completes without errors then the packages have been installed. You’ll also now see additional packages (ggplot2, dplyr, tidyr) listed under the “Packages” pane.\nIf there is an error installing tidyverse, you’ll likely see the following at the end of the command:\n#' Warning in install.packages :\n#'  installation of package ‘tidyverse’ had non-zero exit status\nIf this happens, contact the course instructors to help troubleshoot the installation issue.\nAnother package that we will use in the course is rmarkdown, to install run:\ninstall.packages(\"rmarkdown\")\nand verify installation by running library(rmarkdown)\nIntroduction to using Rstudio and Rmarkdown\nNow that you have installed R and Rstudio, please watch this video (~20 minutes) that provides an overview of how to use Rstudio IDE and an introduction to the Rmarkdown format.\nintro-to-rstudio.mp4\nintro-to-rstudio.mov\n(Appendix) Installing packages from other sources\nAt this point you will only need to install the tidyverse and rmarkdown packages \nThere are 2 additional commonly used repositories for R packages that you should know about:\nBioconductor is a repository that hosts 2,000+ bioinformatics related packages.\nTo install bioconductor packages you should use the CRAN package BiocManager. BiocManager has a function called install() to install bioconductor packages. For example to install ComplexHeatmap\ninstall.packages(\"BiocManager\")\nlibrary(BiocManager)\ninstall(\"ComplexHeatmap\")\n# or equivalently you could run BiocManager::install(\"ComplexHeatmap\")\nGithub hosts open-source code from millions of software projects. R packages hosted on github can be installed using the remotes package. Packages on github are generally the development version of a package, or a package that has not been contributed to either CRAN or Bioconductor. To install you’ll need to find the organization name and the repository name on github to install.\nFor example to install the LaCroixColorR package:\ninstall.packages(\"remotes\")\nremotes::install_github('johannesbjork/LaCroixColoR')\n\n\n\n",
    "preview": "posts/2022-10-03-install-r/img/install-packages.png",
    "last_modified": "2022-11-22T15:31:04-07:00",
    "input_file": "install-r.knit.md"
  }
]
